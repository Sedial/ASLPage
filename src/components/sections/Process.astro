---
// Load process data
const processData = await import('../../data/process.json');
const { headline, subheadline, steps, metrics } = processData;

// Interactive script for process visualization
const interactiveScript = `
  document.addEventListener('DOMContentLoaded', function() {
    const processSteps = document.querySelectorAll('.process-step');
    const progressLine = document.querySelector('.progress-line');
    let currentStep = 0;
    let autoPlay = true;
    
    // Auto-advance through steps
    function advanceStep() {
      if (!autoPlay) return;
      
      // Remove active class from all steps
      processSteps.forEach(step => step.classList.remove('active'));
      
      // Add active class to current step
      if (processSteps[currentStep]) {
        processSteps[currentStep].classList.add('active');
      }
      
      // Update progress line
      const progressPercentage = ((currentStep + 1) / processSteps.length) * 100;
      if (progressLine) {
        progressLine.style.width = progressPercentage + '%';
      }
      
      // Move to next step
      currentStep = (currentStep + 1) % processSteps.length;
    }
    
    // Start auto-advance
    advanceStep(); // Initial call
    const autoAdvanceInterval = setInterval(advanceStep, 3000);
    
    // Manual step control
    processSteps.forEach((step, index) => {
      step.addEventListener('click', () => {
        autoPlay = false;
        clearInterval(autoAdvanceInterval);
        
        // Remove active from all
        processSteps.forEach(s => s.classList.remove('active'));
        
        // Add active to clicked
        step.classList.add('active');
        
        // Update progress
        const progressPercentage = ((index + 1) / processSteps.length) * 100;
        if (progressLine) {
          progressLine.style.width = progressPercentage + '%';
        }
        
        // Resume auto-play after 5 seconds
        setTimeout(() => {
          autoPlay = true;
          currentStep = (index + 1) % processSteps.length;
          const newInterval = setInterval(advanceStep, 3000);
        }, 5000);
      });
      
      // Hover effects
      step.addEventListener('mouseenter', () => {
        if (!step.classList.contains('active')) {
          step.style.transform = 'scale(1.05)';
        }
      });
      
      step.addEventListener('mouseleave', () => {
        if (!step.classList.contains('active')) {
          step.style.transform = 'scale(1)';
        }
      });
    });
    
    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);
    
    // Observe all process elements
    document.querySelectorAll('.process-step, .process-metric').forEach(el => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(30px)';
      el.style.transition = 'all 0.6s ease';
      observer.observe(el);
    });
  });
`;

// Helper function to get icon SVG
function getIconSVG(iconName: string) {
  const icons = {
    inbox: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />`,
    warehouse: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />`,
    package: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />`,
    route: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />`,
    truck: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />`,
    check: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />`
  };
  return icons[iconName] || icons.check;
}
---

<section class="section relative overflow-hidden bg-gray-50" id="process">
  <!-- Fondo minimalista con efecto sutil -->
  <div class="absolute inset-0 overflow-hidden">
    <!-- Gradiente de fondo simplificado -->
    <div class="absolute inset-0 bg-gradient-to-br from-gray-50 to-white opacity-80"></div>
    
    <!-- Elemento decorativo más sutil -->
    <div class="absolute top-0 right-0 w-1/4 h-1/4 opacity-10">
      <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
        <path fill="#CA241C" d="M39.9,-65.7C51.1,-58.5,59.5,-46.3,65.2,-33.1C70.9,-19.9,73.9,-5.7,71.8,7.5C69.7,20.7,62.5,32.9,53.1,42.8C43.7,52.7,32.1,60.3,19.1,65.7C6.1,71.1,-8.3,74.3,-22.7,72.1C-37.1,69.9,-51.5,62.3,-60.8,50.5C-70.1,38.7,-74.3,22.7,-74.9,7.1C-75.5,-8.5,-72.5,-23.7,-64.7,-35.8C-56.9,-47.9,-44.3,-56.9,-31.3,-63.2C-18.3,-69.5,-4.9,-73.1,7.7,-71.5C20.3,-69.9,28.7,-72.9,39.9,-65.7Z" transform="translate(100 100)" />
      </svg>
    </div>
  </div>

  <div class="container mx-auto px-4 max-w-7xl relative z-10">
    <!-- Header Section con diseño minimalista y profesional -->
    <div class="relative mb-16">
      <div class="text-center relative">
        <!-- Icono minimalista -->
        <div class="relative inline-block mb-8">
          <div class="inline-flex items-center justify-center w-20 h-20 bg-white rounded-full shadow-md">
            <svg class="w-10 h-10 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
        </div>
        
        <!-- Título con estilo profesional -->
        <h2 class="text-4xl lg:text-5xl font-bold mb-6 text-primary-600">
          {headline}
        </h2>
        
        <!-- Subtítulo con tipografía clara -->
        <p class="text-lg md:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed mb-8">
          {subheadline}
        </p>
        
        <!-- Separador minimalista -->
        <div class="h-1 w-24 bg-primary-600 mx-auto rounded-full"></div>
      </div>
    </div>

    <!-- Proceso Logístico - Diseño 3D Innovador -->
    <div class="relative mb-32">
      
      <!-- Contenedor 3D con perspectiva -->
      <div class="relative z-10 perspective-1000">
        {steps.map((step, index) => {
          const isEven = index % 2 === 0;
          const colorMap = {
            primary: {
              gradient: 'from-primary-500 to-primary-600',
              text: 'text-primary-500',
              border: 'border-primary-500/20',
              bg: 'bg-primary-50/30',
              shadow: 'shadow-primary-500/20',
              glow: 'group-hover:shadow-primary-500/30',
              solid: 'bg-primary-500'
            },
            secondary: {
              gradient: 'from-secondary-500 to-secondary-600',
              text: 'text-secondary-500',
              border: 'border-secondary-500/20',
              bg: 'bg-secondary-50/30',
              shadow: 'shadow-secondary-500/20',
              glow: 'group-hover:shadow-secondary-500/30',
              solid: 'bg-secondary-500'
            },
            'accent-yellow': {
              gradient: 'from-accent-yellow to-amber-500',
              text: 'text-amber-600',
              border: 'border-amber-500/20',
              bg: 'bg-amber-50/30',
              shadow: 'shadow-amber-500/20',
              glow: 'group-hover:shadow-amber-500/30',
              solid: 'bg-accent-yellow'
            },
            'accent-green': {
              gradient: 'from-accent-green to-green-500',
              text: 'text-green-600',
              border: 'border-green-500/20',
              bg: 'bg-green-50/30',
              shadow: 'shadow-green-500/20',
              glow: 'group-hover:shadow-green-500/30',
              solid: 'bg-accent-green'
            }
          }[step.color];
          
          return (
            <div class={`process-step-container ${index === 0 ? 'active' : ''} mb-24 lg:mb-32`} data-step={step.id}>
              {/* Diseño para escritorio con alternancia de lados */}
              <div class="hidden lg:flex items-center justify-center relative">
                {/* Línea conectora diagonal */}
                {index > 0 && (
                  <div class="absolute top-0 left-0 right-0 h-32 -mt-32 overflow-hidden">
                    <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">
                      <path d={isEven ? "M0,0 C30,50 70,50 100,100" : "M100,0 C70,50 30,50 0,100"} 
                            stroke={`url(#gradient-${step.id})`} 
                            stroke-width="2" 
                            fill="none" 
                            stroke-dasharray="5,5" />
                      <defs>
                        <linearGradient id={`gradient-${step.id}`} x1="0%" y1="0%" x2="100%" y2="100%">
                          <stop offset="0%" stop-color="#3D5A80" stop-opacity="0.3" />
                          <stop offset="100%" stop-color={step.color === 'primary' ? '#CA241C' : 
                                                step.color === 'secondary' ? '#3D5A80' : 
                                                step.color === 'accent-yellow' ? '#F5C06B' : '#A2C8A2'} 
                                stop-opacity="0.7" />
                        </linearGradient>
                      </defs>
                    </svg>
                  </div>
                )}
                
                {/* Nodo de la línea de tiempo */}
                <div class={`flex-shrink-0 ${isEven ? 'order-first' : 'order-last'}`}>
                  <div class="relative">
                    {/* Círculo exterior con efecto de brillo */}
                    <div class={`process-node w-20 h-20 rounded-full bg-white border-2 ${colorMap.border} flex items-center justify-center z-20 shadow-lg transition-all duration-500 ${colorMap.shadow} group-hover:scale-110`}>
                      {/* Efecto de brillo en hover */}
                      <div class="absolute inset-0 rounded-full opacity-0 group-hover:opacity-50 blur-md transition-opacity duration-500" style={`background: radial-gradient(circle at center, ${step.color === 'primary' ? '#CA241C' : step.color === 'secondary' ? '#3D5A80' : step.color === 'accent-yellow' ? '#F5C06B' : '#A2C8A2'} 0%, transparent 70%)`}></div>
                      
                      {/* Círculo interior con número */}
                      <div class={`w-14 h-14 rounded-full bg-gradient-to-br ${colorMap.gradient} flex items-center justify-center transform transition-transform duration-500 group-hover:scale-105 shadow-inner`}>
                        <span class="text-white text-xl font-bold">{step.id}</span>
                      </div>
                    </div>
                    
                    {/* Etiqueta de duración */}
                    <div class="absolute top-full mt-3 left-1/2 transform -translate-x-1/2 whitespace-nowrap">
                      <span class={`text-xs font-medium px-3 py-1.5 rounded-full bg-white shadow-sm ${colorMap.border} ${colorMap.text} backdrop-blur-sm`}>
                        {step.duration}
                      </span>
                    </div>
                  </div>
                </div>
                
                {/* Contenido principal con efecto 3D */}
                <div class={`w-2/5 ${isEven ? 'ml-10' : 'mr-10'}`}>
                  <div class={`group relative bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-xl hover:shadow-2xl transition-all duration-500 border border-gray-100 overflow-hidden transform hover:-translate-y-1 ${colorMap.glow}`}>
                    {/* Efecto de brillo en esquina */}
                    <div class="absolute -top-10 -right-10 w-20 h-20 rounded-full bg-gradient-to-br opacity-0 group-hover:opacity-20 blur-xl transition-opacity duration-700" style={`background: radial-gradient(circle at center, ${step.color === 'primary' ? '#CA241C' : step.color === 'secondary' ? '#3D5A80' : step.color === 'accent-yellow' ? '#F5C06B' : '#A2C8A2'} 0%, transparent 70%)`}></div>
                    
                    {/* Decoración de fondo */}
                    <div class="absolute -right-16 -bottom-16 w-48 h-48 rounded-full bg-gradient-to-br from-gray-50 to-gray-100 opacity-50 group-hover:opacity-70 transition-all duration-500"></div>
                    
                    <div class="relative">
                      {/* Imagen del proceso con efecto 3D */}
                      <div class="relative mb-6 overflow-hidden rounded-xl shadow-md transform group-hover:scale-105 transition-all duration-500">
                        <img 
                          srcset={`/images/process/step${step.id}.webp 433w, /images/process/step${step.id}.webp 600w, /images/process/step${step.id}.webp 800w`}
                          sizes="(max-width: 640px) 433px, (max-width: 1024px) 600px, 800px"
                          src={`/images/process/step${step.id}.webp`} 
                          alt={step.title} 
                          class="w-full h-auto object-cover" 
                          loading="lazy"
                          width="600"
                          height="400"
                        />
                        {/* Overlay con gradiente del color del paso */}
                        <div class={`absolute inset-0 opacity-0 group-hover:opacity-20 transition-opacity duration-500 bg-gradient-to-br ${colorMap.gradient}`}></div>
                      </div>
                      {/* Encabezado con icono 3D */}
                      <div class="flex items-start mb-6">
                        <div class={`flex-shrink-0 w-16 h-16 rounded-xl bg-gradient-to-br ${colorMap.gradient} p-0.5 shadow-lg mr-5 overflow-hidden transform group-hover:rotate-3 transition-transform duration-500`}>
                          <div class="w-full h-full bg-white rounded-lg flex items-center justify-center">
                            <svg class={`w-8 h-8 ${colorMap.text}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <Fragment set:html={getIconSVG(step.icon)} />
                            </svg>
                          </div>
                        </div>
                        
                        <h3 class="text-2xl font-bold text-primary-600 group-hover:text-primary-700 transition-colors duration-300">{step.title}</h3>
                      </div>
                      
                      {/* Descripción con mejor tipografía */}
                      <p class="text-gray-600 mb-6 leading-relaxed">{step.description}</p>
                      
                      {/* Tecnologías con diseño mejorado */}
                      <div class="space-y-3">
                        <h4 class="text-xs font-semibold text-gray-500 uppercase tracking-wider flex items-center">
                          <span class={`inline-block w-3 h-3 rounded-full ${colorMap.solid} mr-2`}></span>
                          Tecnologías Aplicadas
                        </h4>
                        <div class="flex flex-wrap gap-2">
                          {step.technologies.map((tech) => (
                            <span class={`text-xs px-3 py-1.5 rounded-lg ${colorMap.bg} ${colorMap.text} border ${colorMap.border} transform transition-transform duration-300 hover:scale-105 hover:shadow-sm`}>
                              {tech}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Diseño para móvil - Simplificado pero elegante */}
              <div class="lg:hidden">
                <div class="relative bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-gray-100 overflow-hidden">
                  {/* Imagen para móvil */}
                  <div class="relative mb-4 overflow-hidden rounded-lg shadow-sm">
                    <img 
                      srcset={`/images/process/step${step.id}.webp 433w, /images/process/step${step.id}.webp 600w`}
                      sizes="(max-width: 640px) 433px, 600px"
                      src={`/images/process/step${step.id}.webp`} 
                      alt={step.title} 
                      class="w-full h-auto object-cover" 
                      loading="lazy"
                      width="433"
                      height="289"
                    />
                  </div>
                  
                  {/* Cabecera con número e icono */}
                  <div class="flex items-center mb-4">
                    <div class={`w-14 h-14 rounded-full bg-gradient-to-br ${colorMap.gradient} flex items-center justify-center shadow-md`}>
                      <span class="text-white font-bold text-lg">{step.id}</span>
                    </div>
                    <div class="ml-4">
                      <h3 class="text-xl font-bold text-primary-600">{step.title}</h3>
                      <span class={`text-xs font-medium px-2 py-1 rounded-full bg-white shadow-sm ${colorMap.border} ${colorMap.text} inline-block mt-1`}>
                        {step.duration}
                      </span>
                    </div>
                  </div>
                  
                  {/* Línea separadora con gradiente */}
                  <div class="w-full h-0.5 bg-gradient-to-r from-transparent via-gray-200 to-transparent my-4"></div>
                  
                  {/* Contenido */}
                  <div class="space-y-4">
                    <p class="text-gray-600 leading-relaxed">{step.description}</p>
                    
                    <div class="pt-2">
                      <h4 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2 flex items-center">
                        <svg class={`w-4 h-4 mr-1 ${colorMap.text}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <Fragment set:html={getIconSVG(step.icon)} />
                        </svg>
                        Tecnologías
                      </h4>
                      <div class="flex flex-wrap gap-1.5">
                        {step.technologies.map((tech) => (
                          <span class={`text-xs px-2 py-1 rounded-lg ${colorMap.bg} ${colorMap.text} border ${colorMap.border}`}>
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Conector vertical para móvil */}
                {index < steps.length - 1 && (
                  <div class="flex justify-center my-4">
                    <div class="w-0.5 h-10 bg-gradient-to-b from-gray-300 to-transparent"></div>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>

    <!-- Process Metrics - Diseño minimalista y profesional -->
    <div class="relative bg-white rounded-lg p-6 shadow-sm border border-gray-100 overflow-hidden">
      <div class="relative z-10">
        <!-- Header con tipografía profesional -->
        <div class="text-center mb-8">
          <h3 class="text-2xl lg:text-3xl font-bold mb-3 text-primary-600">
            Resultados que Garantizamos
          </h3>
          <p class="text-sm text-gray-600 max-w-2xl mx-auto">
            Nuestro proceso optimizado nos permite mantener los más altos estándares de calidad
          </p>
          
          <!-- Separador minimalista -->
          <div class="h-px w-12 bg-primary-600/40 mx-auto mt-4 rounded-full"></div>
        </div>
        
        <!-- Metrics Dashboard con diseño limpio -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Accuracy Metric -->
          <div class="process-metric bg-white rounded-md p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-6 h-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div class="text-2xl lg:text-3xl font-bold text-primary-600 mb-1 text-center">{metrics.accuracy}</div>
            <div class="text-xs text-gray-600 font-medium text-center mb-3">Precisión en Pedidos</div>
            <div class="w-full h-1 bg-gray-100 rounded-full overflow-hidden">
              <div class="h-full bg-primary-600 rounded-full" style="width: 99.8%"></div>
            </div>
          </div>
          
          <!-- On-Time Delivery Metric -->
          <div class="process-metric bg-white rounded-md p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-6 h-6 text-secondary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div class="text-2xl lg:text-3xl font-bold text-secondary-600 mb-1 text-center">{metrics.onTimeDelivery}</div>
            <div class="text-xs text-gray-600 font-medium text-center mb-3">Entregas a Tiempo</div>
            <div class="w-full h-1 bg-gray-100 rounded-full overflow-hidden">
              <div class="h-full bg-secondary-600 rounded-full" style="width: 96.5%"></div>
            </div>
          </div>
          
          <!-- Customer Satisfaction Metric -->
          <div class="process-metric bg-white rounded-md p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-6 h-6 text-accent-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div class="text-2xl lg:text-3xl font-bold text-accent-green mb-1 text-center">{metrics.customerSatisfaction}</div>
            <div class="text-xs text-gray-600 font-medium text-center mb-3">Satisfacción Cliente</div>
            <div class="w-full h-1 bg-gray-100 rounded-full overflow-hidden">
              <div class="h-full bg-accent-green rounded-full" style="width: 98.2%"></div>
            </div>
          </div>
          
          <!-- Processing Time Metric -->
          <div class="process-metric bg-white rounded-md p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-6 h-6 text-accent-yellow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <div class="text-2xl lg:text-3xl font-bold text-accent-yellow mb-1 text-center">{metrics.processingTime}</div>
            <div class="text-xs text-gray-600 font-medium text-center mb-3">Tiempo Procesamiento</div>
            <div class="w-full h-1 bg-gray-100 rounded-full overflow-hidden">
              <div class="h-full bg-accent-yellow rounded-full" style="width: 95%"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Interactive Script - Simplified for basic functionality -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const processSteps = document.querySelectorAll('.process-step-container');
      const processNodes = document.querySelectorAll('.process-node');
      
      // Función simplificada para activar un paso
      function activateStep(stepIndex) {
        // Remove active class from all steps
        processSteps.forEach(step => step.classList.remove('active'));
        processNodes.forEach(node => {
          node.classList.remove('scale-110');
        });
        
        // Add active class to selected step
        if (processSteps[stepIndex]) {
          processSteps[stepIndex].classList.add('active');
          const currentNode = processNodes[stepIndex];
          if (currentNode) {
            currentNode.classList.add('scale-110');
          }
        }
      }
      
      // Activar el primer paso inicialmente
      activateStep(0);
      
      // Control manual de pasos con efectos básicos
      processSteps.forEach((step, index) => {
        step.addEventListener('click', () => {
          // Activar el paso seleccionado
          activateStep(index);
        });

        // Efectos de hover simplificados
        step.addEventListener('mouseenter', () => {
          if (!step.classList.contains('active')) {
            step.style.transform = 'scale(1.02)';
          }
        });
        
        step.addEventListener('mouseleave', () => {
          if (!step.classList.contains('active')) {
            step.style.transform = '';
          }
        });
      });
      
      // Intersection Observer simplificado
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
          }
        });
      }, observerOptions);
      
      // Observe all process elements
      document.querySelectorAll('.process-step-container, .process-metric').forEach(el => {
        observer.observe(el);
      });
    });
  </script>

  <style>
    :root {
      --color-primary-500: #CA241C;
      --color-primary-600: #9E2420;
      --color-secondary-500: #3D5A80;
      --color-secondary-600: #2d4a6b;
      --color-accent-yellow: #F5C06B;
      --color-accent-green: #A2C8A2;
    }

    /* 3D Perspective and transform styles - simplificados */
    .perspective {
      perspective: 1000px;
    }
    
    .perspective-1000 {
      perspective: 1000px;
    }
    
    /* Process Step Styles - simplificados */
    .process-step-container {
      transition: all 0.4s ease-out;
      opacity: 0;
      transform: translateY(10px);
    }
    
    .process-step-container.animate-in {
      opacity: 1;
      transform: translateY(0);
    }
    
    .process-step-container.active .process-node {
      box-shadow: 0 0 0 4px rgba(202, 36, 28, 0.1), 0 5px 10px -2px rgba(0, 0, 0, 0.1);
    }
    
    /* Metric Animations - simplificadas */
    .process-metric {
      transition: all 0.4s ease-out;
      opacity: 0;
      transform: translateY(10px);
    }
    
    .process-metric.animate-in {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* Background grid pattern - simplificado */
    .bg-grid-pattern {
      background-image: linear-gradient(to right, rgba(0, 0, 0, 0.03) 1px, transparent 1px),
                        linear-gradient(to bottom, rgba(0, 0, 0, 0.03) 1px, transparent 1px);
      background-size: 20px 20px;
    }
    
    /* Animation delay - simplificado */
    .process-step-container:nth-child(1) { transition-delay: 0ms; }
    .process-step-container:nth-child(2) { transition-delay: 50ms; }
    .process-step-container:nth-child(3) { transition-delay: 100ms; }
    .process-step-container:nth-child(4) { transition-delay: 150ms; }
    .process-step-container:nth-child(5) { transition-delay: 200ms; }
    .process-step-container:nth-child(6) { transition-delay: 250ms; }
    
    .process-metric:nth-child(1) { transition-delay: 100ms; }
    .process-metric:nth-child(2) { transition-delay: 150ms; }
    .process-metric:nth-child(3) { transition-delay: 200ms; }
    .process-metric:nth-child(4) { transition-delay: 250ms; }
    
    /* Animation keyframes - simplificados */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.03);
      }
    }
    
    .animate-fade-in {
      animation: fadeInUp 0.6s ease-out forwards;
    }
  </style>
</section>
