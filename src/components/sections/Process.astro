---
// Load process data
const processData = await import('../../data/process.json');
const { headline, subheadline, steps, metrics } = processData;

// Interactive script for process visualization
const interactiveScript = `
  document.addEventListener('DOMContentLoaded', function() {
    const processSteps = document.querySelectorAll('.process-step');
    const progressLine = document.querySelector('.progress-line');
    let currentStep = 0;
    let autoPlay = true;
    
    // Auto-advance through steps
    function advanceStep() {
      if (!autoPlay) return;
      
      // Remove active class from all steps
      processSteps.forEach(step => step.classList.remove('active'));
      
      // Add active class to current step
      if (processSteps[currentStep]) {
        processSteps[currentStep].classList.add('active');
      }
      
      // Update progress line
      const progressPercentage = ((currentStep + 1) / processSteps.length) * 100;
      if (progressLine) {
        progressLine.style.width = progressPercentage + '%';
      }
      
      // Move to next step
      currentStep = (currentStep + 1) % processSteps.length;
    }
    
    // Start auto-advance
    advanceStep(); // Initial call
    const autoAdvanceInterval = setInterval(advanceStep, 3000);
    
    // Manual step control
    processSteps.forEach((step, index) => {
      step.addEventListener('click', () => {
        autoPlay = false;
        clearInterval(autoAdvanceInterval);
        
        // Remove active from all
        processSteps.forEach(s => s.classList.remove('active'));
        
        // Add active to clicked
        step.classList.add('active');
        
        // Update progress
        const progressPercentage = ((index + 1) / processSteps.length) * 100;
        if (progressLine) {
          progressLine.style.width = progressPercentage + '%';
        }
        
        // Resume auto-play after 5 seconds
        setTimeout(() => {
          autoPlay = true;
          currentStep = (index + 1) % processSteps.length;
          const newInterval = setInterval(advanceStep, 3000);
        }, 5000);
      });
      
      // Hover effects
      step.addEventListener('mouseenter', () => {
        if (!step.classList.contains('active')) {
          step.style.transform = 'scale(1.05)';
        }
      });
      
      step.addEventListener('mouseleave', () => {
        if (!step.classList.contains('active')) {
          step.style.transform = 'scale(1)';
        }
      });
    });
    
    // Intersection Observer for animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);
    
    // Observe all process elements
    document.querySelectorAll('.process-step, .process-metric').forEach(el => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(30px)';
      el.style.transition = 'all 0.6s ease';
      observer.observe(el);
    });
  });
`;

// Helper function to get icon SVG
function getIconSVG(iconName: string) {
  const icons = {
    inbox: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />`,
    warehouse: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />`,
    package: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />`,
    route: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />`,
    truck: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />`,
    check: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />`
  };
  return icons[iconName] || icons.check;
}
---

<section class="section bg-gradient-to-br from-gray-50 via-white to-gray-50 relative overflow-hidden" id="process">
  <!-- Background decorative elements -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="absolute -top-40 -right-40 w-80 h-80 bg-primary-100 rounded-full opacity-20 blur-3xl"></div>
    <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-secondary-100 rounded-full opacity-20 blur-3xl"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-accent-yellow/10 rounded-full opacity-30 blur-3xl"></div>
  </div>

  <div class="container mx-auto px-4 max-w-7xl relative z-10">
    <!-- Header Section -->
    <div class="text-center mb-20">
      <div class="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-primary-500 to-primary-600 rounded-2xl mb-8 shadow-lg">
        <svg class="w-10 h-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      </div>
      <h2 class="text-5xl lg:text-6xl font-bold text-gray-900 mb-6 leading-tight">
        {headline}
      </h2>
      <p class="text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed">
        {subheadline}
      </p>
    </div>

    <!-- Process Steps -->
    <div class="relative mb-20">
      <!-- Progress Line -->
      <div class="absolute top-1/2 left-0 right-0 h-1 bg-gray-200 rounded-full transform -translate-y-1/2 z-0">
        <div class="progress-line h-full bg-gradient-to-r from-primary-500 to-primary-600 rounded-full transition-all duration-1000 ease-out" style="width: 16.67%;"></div>
      </div>
      
      <!-- Steps Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 relative z-10">
        {steps.map((step, index) => (
          <div class={`process-step bg-white rounded-3xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 cursor-pointer border-2 border-transparent hover:border-${step.color}-200 ${index === 0 ? 'active' : ''}`} data-step={step.id}>
            <!-- Step Number -->
            <div class="flex items-center justify-between mb-6">
              <div class={`w-12 h-12 bg-gradient-to-br from-${step.color}-500 to-${step.color}-600 rounded-xl flex items-center justify-center text-white font-bold text-lg shadow-lg`}>
                {step.id}
              </div>
              <div class={`text-sm font-semibold text-${step.color}-600 bg-${step.color}-50 px-3 py-1 rounded-full`}>
                {step.duration}
              </div>
            </div>
            
            <!-- Icon -->
            <div class={`w-16 h-16 bg-${step.color}-100 rounded-2xl flex items-center justify-center mb-6`}>
              <svg class={`w-8 h-8 text-${step.color}-600`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <Fragment set:html={getIconSVG(step.icon)} />
              </svg>
            </div>
            
            <!-- Content -->
            <h3 class="text-2xl font-bold text-gray-900 mb-4">{step.title}</h3>
            <p class="text-gray-600 mb-6 leading-relaxed">{step.description}</p>
            
            <!-- Technologies -->
            <div class="space-y-2">
              <h4 class="text-sm font-semibold text-gray-700 uppercase tracking-wide">Tecnologías:</h4>
              <div class="flex flex-wrap gap-2">
                {step.technologies.map((tech) => (
                  <span class={`text-xs px-3 py-1 bg-${step.color}-50 text-${step.color}-700 rounded-full border border-${step.color}-200`}>
                    {tech}
                  </span>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Process Metrics -->
    <div class="bg-white rounded-3xl p-8 lg:p-12 shadow-xl border border-gray-100">
      <div class="text-center mb-12">
        <h3 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
          Resultados que <span class="text-primary-500">Garantizamos</span>
        </h3>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          Nuestro proceso optimizado nos permite mantener los más altos estándares de calidad
        </p>
      </div>
      
      <div class="grid grid-cols-2 lg:grid-cols-4 gap-8">
        <div class="process-metric text-center">
          <div class="text-4xl lg:text-5xl font-bold text-primary-500 mb-2">{metrics.accuracy}</div>
          <div class="text-gray-600 font-medium">Precisión en Pedidos</div>
        </div>
        <div class="process-metric text-center">
          <div class="text-4xl lg:text-5xl font-bold text-secondary-500 mb-2">{metrics.onTimeDelivery}</div>
          <div class="text-gray-600 font-medium">Entregas a Tiempo</div>
        </div>
        <div class="process-metric text-center">
          <div class="text-4xl lg:text-5xl font-bold text-accent-green mb-2">{metrics.customerSatisfaction}</div>
          <div class="text-gray-600 font-medium">Satisfacción Cliente</div>
        </div>
        <div class="process-metric text-center">
          <div class="text-4xl lg:text-5xl font-bold text-accent-yellow mb-2">{metrics.processingTime}</div>
          <div class="text-gray-600 font-medium">Tiempo Procesamiento</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Interactive Script -->
  <script set:html={interactiveScript} />

  <style>
    :root {
      --color-primary-500: #CA241C;
      --color-primary-600: #9E2420;
      --color-secondary-500: #3D5A80;
      --color-secondary-600: #2d4a6b;
      --color-accent-yellow: #F5C06B;
      --color-accent-green: #A2C8A2;
    }

    /* Process Step Styles */
    .process-step {
      transition: all 0.5s ease;
      position: relative;
    }
    
    .process-step.active {
      transform: scale(1.05);
      box-shadow: 0 25px 50px rgba(202, 36, 28, 0.15);
      border-color: var(--color-primary-500);
    }
    
    .process-step.active::before {
      content: '';
      position: absolute;
      inset: -2px;
      background: linear-gradient(135deg, var(--color-primary-500), var(--color-secondary-500));
      border-radius: 1.5rem;
      z-index: -1;
      opacity: 0.1;
    }
    
    /* Progress Line Animation */
    .progress-line {
      background: linear-gradient(90deg, var(--color-primary-500), var(--color-secondary-500), var(--color-accent-green));
      box-shadow: 0 2px 10px rgba(202, 36, 28, 0.3);
    }
    
    /* Metric Animations */
    .process-metric {
      transition: all 0.3s ease;
    }
    
    .process-metric:hover {
      transform: translateY(-5px);
    }
    
    /* Color Classes */
    .bg-primary-50 { background-color: #fef2f2; }
    .bg-primary-100 { background-color: #fee2e2; }
    .bg-primary-500 { background-color: var(--color-primary-500); }
    .bg-primary-600 { background-color: var(--color-primary-600); }
    .text-primary-500 { color: var(--color-primary-500); }
    .text-primary-600 { color: var(--color-primary-600); }
    .text-primary-700 { color: #991b1b; }
    .border-primary-200 { border-color: #fecaca; }
    .border-primary-500 { border-color: var(--color-primary-500); }
    
    .bg-secondary-50 { background-color: #f8fafc; }
    .bg-secondary-100 { background-color: #f1f5f9; }
    .bg-secondary-500 { background-color: var(--color-secondary-500); }
    .bg-secondary-600 { background-color: var(--color-secondary-600); }
    .text-secondary-500 { color: var(--color-secondary-500); }
    .text-secondary-600 { color: var(--color-secondary-600); }
    .text-secondary-700 { color: #1e293b; }
    .border-secondary-200 { border-color: #e2e8f0; }
    
    .bg-accent-green { background-color: var(--color-accent-green); }
    .text-accent-green { color: var(--color-accent-green); }
    .bg-accent-green-50 { background-color: #f0fdf4; }
    .text-accent-green-700 { color: #15803d; }
    .border-accent-green-200 { border-color: #bbf7d0; }
    
    .bg-accent-yellow { background-color: var(--color-accent-yellow); }
    .text-accent-yellow { color: var(--color-accent-yellow); }
    .bg-accent-yellow-50 { background-color: #fffbeb; }
    .text-accent-yellow-700 { color: #a16207; }
    .border-accent-yellow-200 { border-color: #fde68a; }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .process-step {
        margin-bottom: 2rem;
      }
      
      .progress-line {
        display: none;
      }
    }
    
    /* Animation keyframes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
    }
    
    .process-step.active {
      animation: pulse 2s infinite;
    }
  </style>
</section>
